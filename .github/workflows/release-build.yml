name: Release Build

on:
  push:
    tags:
      - 'v*'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Initialize submodules
        run: git submodule update --init --recursive

      # Debug steps: List directory contents recursively
      - name: List directory contents recursively
        shell: pwsh
        run: Get-ChildItem -Recurse

      # Debug steps: List vcpkg directory contents
      - name: List vcpkg directory contents
        shell: pwsh
        run: Get-ChildItem -Recurse vcpkg

      # Install Chocolatey
      - name: Install Chocolatey
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      # Install dependencies via Chocolatey
      - name: Install dependencies via Chocolatey
        shell: pwsh
        run: choco install cmake ninja -y

      # Install CUDA Toolkit via Direct Download
      - name: Download CUDA Toolkit Installer (Windows)
        shell: pwsh
        run: |
          $cuda_version = "12.6.0"
          $cuda_build = "560.76"
          $cuda_url = "https://developer.download.nvidia.com/compute/cuda/${cuda_version}/local_installers/cuda_${cuda_version}_${cuda_build}_windows.exe"
          Write-Output "Attempting to download CUDA Toolkit from $cuda_url"

          # Check if the URL is accessible
          try {
            $response = Invoke-WebRequest -Uri $cuda_url -Method Head -UseBasicParsing -ErrorAction Stop
            Write-Output "URL exists. Proceeding with download."
          }
          catch {
            Write-Error "CUDA Toolkit installer not found at $cuda_url. Please verify the URL."
            exit 1
          }

          # Download the installer
          Invoke-WebRequest -Uri $cuda_url -OutFile "cuda_installer.exe" -UseBasicParsing

      - name: Install CUDA Toolkit (Windows)
        shell: pwsh
        run: |
          Start-Process -FilePath "cuda_installer.exe" -ArgumentList "/S" -Wait
          Remove-Item "cuda_installer.exe"

      # Verify CUDA Installation
      - name: Verify CUDA Installation
        shell: pwsh
        run: |
          nvcc --version

      # Download and Extract Torch (Windows)
      - name: Download and Extract Torch (Windows)
        env:
          WORKSPACE: ${{ github.workspace }}
        shell: pwsh
        run: |
          $LIBTORCH_VERSION = "2.3.1"    # Update to the required version
          $CUDA_VERSION = "cu126"        # Ensure this matches the installed CUDA version
          $LIBTORCH_URL = "https://download.pytorch.org/libtorch/${CUDA_VERSION}/libtorch-cxx11-abi-shared-with-deps-${LIBTORCH_VERSION}%2B${CUDA_VERSION}.zip"
          Write-Output "Downloading libtorch from $LIBTORCH_URL"
          curl -f -L -o libtorch.zip "$LIBTORCH_URL" || { Write-Error "Failed to download libtorch"; exit 1 }
          Expand-Archive -Path 'libtorch.zip' -DestinationPath "$env:WORKSPACE"
          Remove-Item 'libtorch.zip'

      # Download and Extract TensorRT (Windows)
      - name: Download and Extract TensorRT (Windows)
        env:
          WORKSPACE: ${{ github.workspace }}
        shell: pwsh
        run: |
          $TENSORRT_VERSION = "10.4.0.26"    # Update to the required version
          $CUDA_VERSION = "12.6"             # Ensure compatibility with TensorRT
          $TENSORRT_URL = "https://developer.download.nvidia.com/compute/machine-learning/tensorrt/10.4.0/tars/TensorRT-10.4.0.26.Windows.zip"
          Write-Output "Downloading TensorRT from $TENSORRT_URL"
          curl -f -L -o tensorrt.zip "$TENSORRT_URL" || { Write-Error "Failed to download TensorRT"; exit 1 }
          Expand-Archive -Path 'tensorrt.zip' -DestinationPath "$env:WORKSPACE"
          Remove-Item 'tensorrt.zip'

      # Set up CUDA Environment Variable (Optional)
      - name: Set up CUDA Environment Variable
        shell: pwsh
        run: |
          $env:CUDA_TOOLKIT_ROOT_DIR = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.6"
          Add-Content -Path $env:GITHUB_ENV -Value "CUDA_TOOLKIT_ROOT_DIR=$env:CUDA_TOOLKIT_ROOT_DIR"

      # Configure CMake (Windows)
      - name: Configure CMake (Windows)
        shell: pwsh
        run: |
          cmake -S FrameSmith -B out/build/x64-release `
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET=x64-windows `
            -DCMAKE_PREFIX_PATH="${{ github.workspace }}/libtorch;${{ github.workspace }}/TensorRT" `
            -DCMAKE_BUILD_TYPE=Release

      # Build project (Windows)
      - name: Build project (Windows)
        shell: pwsh
        run: |
          cmake --build "${GITHUB_WORKSPACE}/out/build/x64-release" --config Release

      # Copy dependencies (Windows)
      - name: Copy dependencies (Windows)
        shell: pwsh
        run: |
          Copy-Item "${GITHUB_WORKSPACE}\vcpkg\installed\x64-windows\bin\*.dll" "${GITHUB_WORKSPACE}\out\build\x64-release\" -Recurse -Force
          Copy-Item "${env:CUDA_TOOLKIT_ROOT_DIR}\bin\*.dll" "${GITHUB_WORKSPACE}\out\build\x64-release\" -Recurse -Force

      # Create zip archive (Windows)
      - name: Create zip archive (Windows)
        shell: pwsh
        run: |
          Compress-Archive -Path "${GITHUB_WORKSPACE}/out/build/x64-release/*" -DestinationPath "FrameSmith-Windows.zip" -Force

      # Upload build artifacts (Windows)
      - name: Upload build artifacts (Windows)
        uses: actions/upload-artifact@v3
        with:
          name: FrameSmith_Windows_build
          path: FrameSmith-Windows.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Initialize submodules
        run: git submodule update --init --recursive

      # Debug steps: List directory contents recursively
      - name: List directory contents recursively
        run: ls -R

      # Debug steps: List vcpkg directory contents
      - name: List vcpkg directory contents
        run: ls vcpkg

      # Install dependencies and prepare environment
      - name: Install essential tools (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build nasm pkg-config build-essential manpages-dev software-properties-common unzip

      - name: Install GCC 13 (Linux)
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update && sudo apt-get install -y gcc-13 g++-13
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 13
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 13

      # Download and Extract Torch (Linux)
      - name: Download and Extract Torch (Linux)
        run: |
          LIBTORCH_VERSION="2.3.1"    # Update to the required version
          CUDA_VERSION="cu126"        # Ensure this matches the installed CUDA version
          LIBTORCH_URL="https://download.pytorch.org/libtorch/${CUDA_VERSION}/libtorch-cxx11-abi-shared-with-deps-${LIBTORCH_VERSION}%2B${CUDA_VERSION}.zip"
          echo "Downloading libtorch from $LIBTORCH_URL"
          curl -f -L -o libtorch.zip "$LIBTORCH_URL" || { echo "Failed to download libtorch"; exit 1; }
          file libtorch.zip
          unzip libtorch.zip -d $GITHUB_WORKSPACE
          rm libtorch.zip

      # Download and Extract TensorRT (Linux)
      - name: Download and Extract TensorRT (Linux)
        run: |
          TENSORRT_VERSION="10.4.0.26"    # Update to the required version
          CUDA_VERSION="12.6"             # Ensure compatibility with TensorRT
          TENSORRT_URL="https://developer.download.nvidia.com/compute/machine-learning/tensorrt/10.4.0/tars/TensorRT-10.4.0.26.Linux.x86_64-gnu.cuda-12.6.tar.gz"
          echo "Downloading TensorRT from $TENSORRT_URL"
          curl -f -L -o tensorrt.tar.gz "$TENSORRT_URL" || { echo "Failed to download TensorRT"; exit 1; }
          file tensorrt.tar.gz
          sudo tar -xf tensorrt.tar.gz -C /usr/local/ || { echo "Failed to extract TensorRT"; exit 1; }
          sudo mv /usr/local/TensorRT-${TENSORRT_VERSION} $GITHUB_WORKSPACE/tensorrt || { echo "Failed to move TensorRT directory"; exit 1; }
          sudo rm tensorrt.tar.gz

      # Install nv-codec-headers (Linux)
      - name: Install nv-codec-headers (Linux)
        run: |
          git clone https://github.com/FFmpeg/nv-codec-headers
          cd nv-codec-headers
          sudo make -j$(nproc) && sudo make install
          cd ..
          rm -rf nv-codec-headers

      # Install vcpkg dependencies
      - name: Install vcpkg dependencies (Linux)
        run: |
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install --triplet x64-linux

      # Configure CMake
      - name: Configure CMake (Linux)
        run: |
          cmake -S ${GITHUB_WORKSPACE}/FrameSmith -B ${GITHUB_WORKSPACE}/out/build/x64-release \
            -DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=x64-linux \
            -DCMAKE_PREFIX_PATH="${GITHUB_WORKSPACE}/libtorch;${GITHUB_WORKSPACE}/tensorrt" \
            -DCMAKE_BUILD_TYPE=Release

      # Build project (Linux)
      - name: Build project (Linux)
        run: |
          cmake --build ${GITHUB_WORKSPACE}/out/build/x64-release --config Release

      # Copy dependencies (Linux)
      - name: Copy dependencies (Linux)
        run: |
          cp ${GITHUB_WORKSPACE}/vcpkg/installed/x64-linux/lib/*.so* ${GITHUB_WORKSPACE}/out/build/x64-release/

      # Create zip archive (Linux)
      - name: Create zip archive (Linux)
        run: |
          zip -r FrameSmith-Linux.zip ${GITHUB_WORKSPACE}/out/build/x64-release/*

      # Upload build artifacts (Linux)
      - name: Upload build artifacts (Linux)
        uses: actions/upload-artifact@v3
        with:
          name: FrameSmith_Linux_build
          path: FrameSmith-Linux.zip

  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    steps:
      - name: Download Windows build
        uses: actions/download-artifact@v3
        with:
          name: FrameSmith_Windows_build
          path: .

      - name: Download Linux build
        uses: actions/download-artifact@v3
        with:
          name: FrameSmith_Linux_build
          path: .

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          assets: |
            FrameSmith-Windows.zip
            FrameSmith-Linux.zip

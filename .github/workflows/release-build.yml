name: Release Build

on:
  push:
    tags:
      - 'v*'  # Triggers the workflow on tag push (e.g., v1.0.0)

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up vcpkg
        uses: lukka/get-vcpkg@v11
        with:
          vcpkgDirectory: '${{ runner.temp }}/vcpkg'
          vcpkgTriplet: 'x64-windows'
          cleanAfterBuild: true

      - name: Set up CUDA
        run: |
          $Env:CUDA_TOOLKIT_ROOT_DIR = "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1"

      - name: Install dependencies
        run: |
          choco install -y cmake ninja

      - name: Configure CMake (Windows)
        run: |
          cmake --preset x64-release

      - name: Build project (Windows)
        run: |
          cmake --build out/build/x64-release --config Release

      - name: Copy dependencies (Windows)
        run: |
          xcopy /S /Y "${{ runner.temp }}\vcpkg\installed\x64-windows\bin\*.dll" "out/build/x64-release/"
          xcopy /S /Y "$Env:CUDA_TOOLKIT_ROOT_DIR\bin\*.dll" "out/build/x64-release/"

      - name: Create zip archive (Windows)
        run: |
          Compress-Archive -Path out/build/x64-release/* -DestinationPath FrameSmith-Windows.zip

      - name: Upload build artifacts (Windows)
        uses: actions/upload-artifact@v3
        with:
          name: FrameSmith_Windows_build
          path: FrameSmith-Windows.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build

      - name: Set up vcpkg
        uses: lukka/get-vcpkg@v11
        with:
          vcpkgDirectory: '${{ runner.temp }}/vcpkg'
          vcpkgTriplet: 'x64-linux'
          cleanAfterBuild: true

      - name: Configure CMake (Linux)
        run: |
          cmake --preset x64-release

      - name: Build project (Linux)
        run: |
          cmake --build out/build/x64-release --config Release

      - name: Copy dependencies (Linux)
        run: |
          cp ${{ runner.temp }}/vcpkg/installed/x64-linux/lib/*.so* out/build/x64-release/

      - name: Create zip archive (Linux)
        run: |
          zip -r FrameSmith-Linux.zip out/build/x64-release/*

      - name: Upload build artifacts (Linux)
        uses: actions/upload-artifact@v3
        with:
          name: FrameSmith_Linux_build
          path: FrameSmith-Linux.zip

  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    steps:
      - name: Download Windows build
        uses: actions/download-artifact@v3
        with:
          name: FrameSmith_Windows_build
          path: .

      - name: Download Linux build
        uses: actions/download-artifact@v3
        with:
          name: FrameSmith_Linux_build
          path: .

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          assets: |
            FrameSmith-Windows.zip
            FrameSmith-Linux.zip

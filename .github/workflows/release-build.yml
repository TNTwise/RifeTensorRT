name: Release Build

on:
  push:
    tags:
      - 'v*'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Initialize submodules
        run: git submodule update --init --recursive

      # Debug steps
      - name: List directory contents
        run: dir

      - name: List vcpkg directory contents
        run: dir vcpkg

      - name: Install vcpkg dependencies (Windows)
        shell: cmd
        run: |
          vcpkg\bootstrap-vcpkg.bat
          vcpkg\vcpkg.exe install

      - name: Download and Extract Torch (Windows)
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          curl -L -o libtorch.zip https://download.pytorch.org/libtorch/cu121/libtorch-win-shared-with-deps-2.0.0.zip
          powershell -Command "Expand-Archive -Path 'libtorch.zip' -DestinationPath '${env:WORKSPACE}'"

      - name: Download and Extract TensorRT (Windows)
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          curl -L -o tensorrt.zip https://developer.download.nvidia.com/compute/redist/tensorrt/10.x/TensorRT-10.x.x.x.Windows.zip
          powershell -Command "Expand-Archive -Path 'tensorrt.zip' -DestinationPath '${env:WORKSPACE}'"

      - name: Set up CUDA
        run: |
          $Env:CUDA_TOOLKIT_ROOT_DIR = "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.1"

      - name: Install dependencies
        run: |
          choco install -y cmake ninja

      - name: Configure CMake (Windows)
        run: |
          cmake -S ${GITHUB_WORKSPACE} -B ${GITHUB_WORKSPACE}/out/build/x64-release -DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows -DCMAKE_PREFIX_PATH="${GITHUB_WORKSPACE}/libtorch;${GITHUB_WORKSPACE}/TensorRT" -DCMAKE_BUILD_TYPE=Release

      - name: Build project (Windows)
        run: |
          cmake --build ${GITHUB_WORKSPACE}/out/build/x64-release --config Release

      - name: Copy dependencies (Windows)
        run: |
          xcopy /S /Y "${GITHUB_WORKSPACE}\vcpkg\installed\x64-windows\bin\*.dll" "${GITHUB_WORKSPACE}\out\build\x64-release\"
          xcopy /S /Y "$Env:CUDA_TOOLKIT_ROOT_DIR\bin\*.dll" "${GITHUB_WORKSPACE}\out\build\x64-release\"

      - name: Create zip archive (Windows)
        run: |
          Compress-Archive -Path ${GITHUB_WORKSPACE}/out/build/x64-release/* -DestinationPath FrameSmith-Windows.zip

      - name: Upload build artifacts (Windows)
        uses: actions/upload-artifact@v3
        with:
          name: FrameSmith_Windows_build
          path: FrameSmith-Windows.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Initialize submodules
        run: git submodule update --init --recursive

      # Debug steps
      - name: List directory contents
        run: ls

      - name: List vcpkg directory contents
        run: ls vcpkg

      # Prepare the vcpkg manifest by copying it to the root directory
      - name: Prepare vcpkg Manifest (Linux)
        run: cp ${GITHUB_WORKSPACE}/FrameSmith/vcpkg.json ${GITHUB_WORKSPACE}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build nasm  # Added nasm installation

      - name: Install vcpkg dependencies (Linux)
        run: |
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install --triplet x64-linux

      - name: Download and Extract Torch (Linux)
        run: |
          curl -L -o libtorch.tar.gz https://download.pytorch.org/libtorch/cu121/libtorch-shared-with-deps-2.0.0.tar.gz
          tar -xzf libtorch.tar.gz -C ${GITHUB_WORKSPACE}

      - name: Download and Extract TensorRT (Linux)
        run: |
          curl -L -o tensorrt.tar.gz https://developer.download.nvidia.com/compute/redist/tensorrt/10.x/TensorRT-10.x.x.x.Ubuntu-20.04.tar.gz
          tar -xzf tensorrt.tar.gz -C ${GITHUB_WORKSPACE}

      - name: Configure CMake (Linux)
        run: |
          cmake -S ${GITHUB_WORKSPACE} -B ${GITHUB_WORKSPACE}/out/build/x64-release -DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-linux -DCMAKE_PREFIX_PATH="${GITHUB_WORKSPACE}/libtorch;${GITHUB_WORKSPACE}/TensorRT" -DCMAKE_BUILD_TYPE=Release

      - name: Build project (Linux)
        run: |
          cmake --build ${GITHUB_WORKSPACE}/out/build/x64-release --config Release

      - name: Copy dependencies (Linux)
        run: |
          cp ${GITHUB_WORKSPACE}/vcpkg/installed/x64-linux/lib/*.so* ${GITHUB_WORKSPACE}/out/build/x64-release/

      - name: Create zip archive (Linux)
        run: |
          zip -r FrameSmith-Linux.zip ${GITHUB_WORKSPACE}/out/build/x64-release/*

      - name: Upload build artifacts (Linux)
        uses: actions/upload-artifact@v3
        with:
          name: FrameSmith_Linux_build
          path: FrameSmith-Linux.zip

  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    steps:
      - name: Download Windows build
        uses: actions/download-artifact@v3
        with:
          name: FrameSmith_Windows_build
          path: .

      - name: Download Linux build
        uses: actions/download-artifact@v3
        with:
          name: FrameSmith_Linux_build
          path: .

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          assets: |
            FrameSmith-Windows.zip
            FrameSmith-Linux.zip
